{"ast":null,"code":"import { LOGIN_SUCCESS, LOGIN_FAIL, SET_MESSAGE } from \"./types\";\nimport AuthService from \"../services/auth.service\";\nexport const login = accessToken => dispatch => {\n  return AuthService.login(accessToken).then(data => {\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: {\n        user: data\n      }\n    });\n    return Promise.resolve();\n  }, error => {\n    const message = error.response && error.response.data && error.response.data.message || error.message || error.toString();\n    dispatch({\n      type: LOGIN_FAIL\n    });\n    dispatch({\n      type: SET_MESSAGE,\n      payload: message\n    });\n    return Promise.reject();\n  });\n};","map":{"version":3,"names":["LOGIN_SUCCESS","LOGIN_FAIL","SET_MESSAGE","AuthService","login","accessToken","dispatch","then","data","type","payload","user","Promise","resolve","error","message","response","toString","reject"],"sources":["D:/Workspace/Test2/antd-demo-ts/src/action/auth.ts"],"sourcesContent":["import { LOGIN_SUCCESS, LOGIN_FAIL, SET_MESSAGE } from \"./types\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nexport const login =\r\n  (accessToken) => (dispatch: any) => {\r\n    return AuthService.login(accessToken).then(\r\n      (data) => {\r\n        dispatch({\r\n          type: LOGIN_SUCCESS,\r\n          payload: { user: data },\r\n        });\r\n\r\n        return Promise.resolve();\r\n      },\r\n      (error) => {\r\n        const message =\r\n          (error.response &&\r\n            error.response.data &&\r\n            error.response.data.message) ||\r\n          error.message ||\r\n          error.toString();\r\n\r\n        dispatch({\r\n          type: LOGIN_FAIL,\r\n        });\r\n\r\n        dispatch({\r\n          type: SET_MESSAGE,\r\n          payload: message,\r\n        });\r\n\r\n        return Promise.reject();\r\n      }\r\n    );\r\n  };\r\n"],"mappings":"AAAA,SAASA,aAAa,EAAEC,UAAU,EAAEC,WAAW,QAAQ,SAAS;AAEhE,OAAOC,WAAW,MAAM,0BAA0B;AAElD,OAAO,MAAMC,KAAK,GACfC,WAAW,IAAMC,QAAa,IAAK;EAClC,OAAOH,WAAW,CAACC,KAAK,CAACC,WAAW,CAAC,CAACE,IAAI,CACvCC,IAAI,IAAK;IACRF,QAAQ,CAAC;MACPG,IAAI,EAAET,aAAa;MACnBU,OAAO,EAAE;QAAEC,IAAI,EAAEH;MAAK;IACxB,CAAC,CAAC;IAEF,OAAOI,OAAO,CAACC,OAAO,CAAC,CAAC;EAC1B,CAAC,EACAC,KAAK,IAAK;IACT,MAAMC,OAAO,GACVD,KAAK,CAACE,QAAQ,IACbF,KAAK,CAACE,QAAQ,CAACR,IAAI,IACnBM,KAAK,CAACE,QAAQ,CAACR,IAAI,CAACO,OAAO,IAC7BD,KAAK,CAACC,OAAO,IACbD,KAAK,CAACG,QAAQ,CAAC,CAAC;IAElBX,QAAQ,CAAC;MACPG,IAAI,EAAER;IACR,CAAC,CAAC;IAEFK,QAAQ,CAAC;MACPG,IAAI,EAAEP,WAAW;MACjBQ,OAAO,EAAEK;IACX,CAAC,CAAC;IAEF,OAAOH,OAAO,CAACM,MAAM,CAAC,CAAC;EACzB,CACF,CAAC;AACH,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}